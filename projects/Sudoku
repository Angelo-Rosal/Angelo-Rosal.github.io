---
layout: project
type: project
image: img/Copy of ISA logo.jpg
title: "Sodoku Soulution Finder"
date: 2023-10-23
labels:
  - Java
summary: "Java code that helps find an answer to a given Sodoku problem."
---

## About

This was a project that I created that helps solve given Sodoku problems. In this project I used various algorithms to help solve any Sodoku problem and checks to see if it is valid. The program is designed to solve the given problem and return the problem and solution. 

## Reflection

In this project I used various parameters and minor recursion to fullfill its duty. First I used a wide array of if statements in order to find if the problem is valid. I also used recursion to find the solution to the problem by calling itself and checking to see a valid input. 

In this project my knowledge of Java greatly increased as it improved my insight to how recursion works and uses various Java syntax that will deem useful in future projects. 

<pre><code>
public class Sudoku {

  /* check that the sudoku rules hold in this sudoku puzzle.
   * cells that contain 0 are not checked.
   * @param the sudoku to be checked
   * @param whether to print the error found, if any
   * @return true if this sudoku obeys all of the sudoku rules, otherwise false
   */
	
	
	// makes sure Sudoku is 9 x 9, if not return false
  public static boolean checkSudoku (int [] [] sudoku, boolean printErrors)
  { 
    if (sudoku.length != 9) { 
      if (printErrors) {
        System.out.println ("sudoku has " + sudoku.length +
                            " rows, should have 9");
      }
      return false;
    }
    for (int i = 0; i < sudoku.length; i++) {
      if (sudoku [i].length != 9) {
        if (printErrors) {
          System.out.println ("sudoku row " + i + " has " +
                              sudoku [i].length + " cells, should have 9");
        }
        return false;
      }
    }
    /* check each cell for conflicts */
    // makes sure the number is between 0-9
    for (int i = 0; i < sudoku.length; i++) {
      for (int j = 0; j < sudoku.length; j++) {
        int cell = sudoku [i] [j];
        if (cell == 0) { 
          continue;   /* blanks are always OK */
        }
        if ((cell < 1) || (cell > 9)) {
          if (printErrors) {
            System.out.println ("sudoku row " + i + " column " + j +
                                " has illegal value " + cell);
          }
          return false;
        }
        /* does it match any other value in the same row? */
        for (int m = 0; m < sudoku.length; m++) {
          if ((j != m) && (cell == sudoku [i] [m])) {
            if (printErrors) {
              System.out.println ("sudoku row " + i + " has " + cell +
                                  " at both positions " + j + " and " + m);
            }
            return false;
          }
        }
        /* does it match any other value it in the same column? */
        for (int k = 0; k < sudoku.length; k++) {
          if ((i != k) && (cell == sudoku [k] [j])) {
            if (printErrors) {
              System.out.println ("sudoku column " + j + " has " + cell +
                                  " at both positions " + i + " and " + k);
            }
            return false;
          }
        }
        /* does it match any other value in the 3x3? */
        for (int k = 0; k < 3; k++) {
          for (int m = 0; m < 3; m++) {
            int testRow = (i / 3 * 3) + k;   /* test this row */
            int testCol = (j / 3 * 3) + m;   /* test this col */
            if ((i != testRow) && (j != testCol) &&
                (cell == sudoku [testRow] [testCol])) {
              if (printErrors) {
                System.out.println ("sudoku character " + cell + " at row " +
                                    i + ", column " + j + 
                                    " matches character at row " + testRow +
                                    ", column " + testCol);
              }
              return false;
            }
          }
        }
      }
    }
    return true;
  }

  /* convert the sudoku to a printable string
   * @param the sudoku to be converted
   * @param whether to check for errors
   * @return the printable version of the sudoku
   */
  public static String toString (int [] [] sudoku, boolean debug) {
    if ((! debug) || (checkSudoku (sudoku, true))) {
      String result = "";
      for (int i = 0; i < sudoku.length; i++) {
        if (i % 3 == 0) {
          result = result + "+-------+-------+-------+\n";
        }
        for (int j = 0; j < sudoku.length; j++) {
          if (j % 3 == 0) {
            result = result + "| ";
          }
          if (sudoku [i] [j] == 0) {
            result = result + "  ";
          } else {
            result = result + sudoku [i] [j] + " ";
          }
        }
        result = result + "|\n";
      }
      result = result + "+-------+-------+-------+\n";
      return result;
    }
    return "illegal sudoku";
  }

  /* find an assignment of values to sudoku cells that makes the sudoku valid
   * @param the sudoku to be filled
   * @return whether a solution was found 
   *    if a solution was found, the sudoku is filled in with the solution
   *    if no solution was found, restores the sudoku to its original value
   */
  public static boolean fillSudoku (int [] [] sudoku)
  {
    boolean allFilled = true;
    int row = -1; 
    int col = -1;
    
    for (int i =0; i < 9; i++) {
    	for (int j = 0; j < 9; j++) {
    		if(sudoku[i][j] == 0) {
    			row = i;
    			col = j;
    			allFilled = false;
    			break;
    		}
    	}
    	if (!allFilled) {
    		break;
    	}
    }
    if (allFilled) {
    	return true;
    }
    for (int num = 1; num <= 9; num++) {
    	sudoku[row][col] = num;
    	if (checkSudoku(sudoku, false)) {
    		if (fillSudoku(sudoku)) {
    			return true;
    		}
    	}
    }
    sudoku[row][col] = 0;
    return false;
  }
}
</code></pre>

## Test Code

<pre><code>
public class SudokuTest {

  private static boolean isFilled(int [] [] sudoku)
  {
    for (int i = 0; i < 9; i++) {
      for (int j = 0; j < 9; j++) {
        if (sudoku [i] [j] == 0) {
          return false;
        }
      }
    }
    return true;
  }

  /* test whether two sudoku are equal.  If not, return a new sudoku
   * that is blank where the two sudoku differ.
   * @param the sudoku to be checked
   * @param the solution checked
   * @return null if the two match, and otherwise a sudoku with 0 in
   *    every cell that differs.
   */
  private static int [] [] sameSudoku(int [] [] sudoku, int [] [] solution)
  {
    int [] [] result = new int [9] [9];
    for (int i = 0; i < 9; i++) {
      for (int j = 0; j < 9; j++) {
        result [i] [j] = sudoku [i] [j];
      }
    }
    boolean same = true;
    for (int i = 0; i < 9; i++) {
      for (int j = 0; j < 9; j++) {
        if (result [i] [j] != solution [i] [j]) {
          same = false;
          result [i] [j] = 0;
        }
      }
    }
    if (same) {
      return null;
    }
    return result;
  }

  /* try to solve a sudoku.  If a solution is provided, also check
   * against the solution.  Print the results.
   * @param the name of this sudoku
   * @param the sudoku to be solved
   * @param the given solution, or null
   */
  private static void testSudoku(String name,
                                 int [] [] sudoku, int [] [] solution)
  {
    System.out.println ("solving " + name + "\n" +
                        Sudoku.toString (sudoku, true));
    if (Sudoku.fillSudoku (sudoku)) {
      if (isFilled(sudoku) && Sudoku.checkSudoku (sudoku, true)) {
        System.out.println ("success!\n" + Sudoku.toString (sudoku, true));
        if (solution != null) {
          int [] [] diff = sameSudoku (sudoku, solution);
          if (diff != null) {
            System.out.println ("given solution:\n" +
                                Sudoku.toString (solution, true));
            System.out.println ("difference between solutions:\n" +
                                Sudoku.toString (diff, true));
          }
        }
      } else {   /* the supposed solution is not a complete or valid sudoku */
        if (! isFilled(sudoku)) {
          System.out.println ("sudoku was not completely filled:\n" +
                              Sudoku.toString (sudoku, false));
        }
        if (! Sudoku.checkSudoku(sudoku, false)) {
          System.out.println ("sudoku is not a valid solution:\n" +
                              Sudoku.toString (sudoku, false));
        }
      }
    } else {
      System.out.println ("unable to complete sudoku " + name + "\n" +
                          Sudoku.toString (sudoku, true));
    }
  }

  public static void main (String [] arg)
  {
    int [] [] example1 = {7, 8, 0,  0, 9, 0,  0, 2, 0},
                          {1, 0, 0,  0, 0, 0,  9, 6, 4},
                          {0, 0, 0,  2, 5, 1,  0, 0, 0},

                          {0, 0, 6,  1, 8, 5,  0, 0, 0},
                          {5, 0, 4,  0, 0, 0,  3, 0, 2},
                          {0, 0, 0,  3, 4, 2,  5, 0, 0},

                          {0, 0, 0,  9, 6, 3,  0, 0, 0},
                          {6, 4, 1,  0, 0, 0,  0, 0, 3},
                          {0, 9, 0,  0, 1, 0,  0, 5, 7};

    int [] [] solution1 = {7, 8, 3,  4, 9, 6,  1, 2, 5},
                           {1, 2, 5,  7, 3, 8,  9, 6, 4},
                           {4, 6, 9,  2, 5, 1,  7, 3, 8},

                           {2, 3, 6,  1, 8, 5,  4, 7, 9},
                           {5, 1, 4,  6, 7, 9,  3, 8, 2},
                           {9, 7, 8,  3, 4, 2,  5, 1, 6},

                           {8, 5, 7,  9, 6, 3,  2, 4, 1},
                           {6, 4, 1,  5, 2, 7,  8, 9, 3},
                           {3, 9, 2,  8, 1, 4,  6, 5, 7};

    int [] [] example2 = {0, 6, 0,  9, 0, 8,  0, 1, 0},
                          {0, 0, 4,  0, 0, 0,  0, 0, 0},
                          {8, 0, 3,  0, 0, 0,  4, 5, 0},

                          {2, 0, 0,  0, 6, 0,  0, 0, 8},
                          {9, 0, 0,  0, 0, 0,  0, 0, 4},
                          {5, 0, 0,  0, 7, 0,  0, 0, 2},

                          {0, 7, 8,  0, 0, 0,  9, 0, 5},
                          {0, 0, 0,  0, 0, 0,  6, 0, 0},
                          {0, 1, 0,  3, 0, 2,  0, 4, 0};

    int [] [] solution2 = {7, 6, 5,  9, 4, 8,  2, 1, 3},
                           {1, 2, 4,  5, 3, 6,  7, 8, 9},
                           {8, 9, 3,  7, 2, 1,  4, 5, 6},

                           {2, 4, 7,  1, 6, 3,  5, 9, 8},
                           {9, 3, 6,  2, 8, 5,  1, 7, 4},
                           {5, 8, 1,  4, 7, 9,  3, 6, 2},

                           {3, 7, 8,  6, 1, 4,  9, 2, 5},
                           {4, 5, 2,  8, 9, 7,  6, 3, 1},
                           {6, 1, 9,  3, 5, 2,  8, 4, 7};

    /* a hard sudoku known as AI Escargot */
    int [] [] example3 = {1, 0, 0,  0, 0, 7,  0, 9, 0},
                          {0, 3, 0,  0, 2, 0,  0, 0, 8},
                          {0, 0, 9,  6, 0, 0,  5, 0, 0},

                          {0, 0, 5,  3, 0, 0,  9, 0, 0},
                          {0, 1, 0,  0, 8, 0,  0, 0, 2},
                          {6, 0, 0,  0, 0, 4,  0, 0, 0},

                          {3, 0, 0,  0, 0, 0,  0, 1, 0},
                          {0, 4, 0,  0, 0, 0,  0, 0, 7},
                          {0, 0, 7,  0, 0, 0,  3, 0, 0};

    testSudoku ("example 1", example1, solution1);
    testSudoku ("example 2", example2, solution2);
    testSudoku ("AI Escargot", example3, null);

  }
}
 </code></pre>

